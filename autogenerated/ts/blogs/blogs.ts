// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: blogs/blogs.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "blogs";

export interface Blog {
  id: string;
  content: string;
  title: string;
  imageUrl?: string | undefined;
  tags: string[];
  state: Blog_State;
  publishedAt?: Date | undefined;
  createdAt?: Date | undefined;
}

export enum Blog_State {
  STATE_UNSPECIFIED = "STATE_UNSPECIFIED",
  DRAFT = "DRAFT",
  PUBLISHED = "PUBLISHED",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function blog_StateFromJSON(object: any): Blog_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Blog_State.STATE_UNSPECIFIED;
    case 1:
    case "DRAFT":
      return Blog_State.DRAFT;
    case 2:
    case "PUBLISHED":
      return Blog_State.PUBLISHED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Blog_State.UNRECOGNIZED;
  }
}

export function blog_StateToJSON(object: Blog_State): string {
  switch (object) {
    case Blog_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Blog_State.DRAFT:
      return "DRAFT";
    case Blog_State.PUBLISHED:
      return "PUBLISHED";
    case Blog_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function blog_StateToNumber(object: Blog_State): number {
  switch (object) {
    case Blog_State.STATE_UNSPECIFIED:
      return 0;
    case Blog_State.DRAFT:
      return 1;
    case Blog_State.PUBLISHED:
      return 2;
    case Blog_State.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface ListBlogsRequest {
  pageToken: string;
  pageSize: number;
}

export interface ListBlogsResponse {
  blogs: Blog[];
  nextPageToken: string;
}

export interface ListPublishedBlogsRequest {
  pageToken: string;
  pageSize: number;
}

export interface ListPublishedBlogsResponse {
  blogs: Blog[];
  nextPageToken: string;
}

export interface CreateBlogRequest {
  title: string;
  content: string;
  imageUrl?: string | undefined;
}

export interface CreateBlogResponse {
  blog?: Blog | undefined;
}

export interface GetBlogRequest {
  id: string;
}

export interface GetBlogResponse {
  blog?: Blog | undefined;
}

export interface UpdateBlogRequest {
  id: string;
  title: string;
  content: string;
  imageUrl?: string | undefined;
}

export interface UpdateBlogResponse {
  blog?: Blog | undefined;
}

export interface PublishBlogRequest {
  id: string;
}

export interface PublishBlogResponse {
  blog?: Blog | undefined;
}

export interface ListPublishedBlogsPaginationToken {
  lastPublishedAt?: Date | undefined;
}

export interface ListBlogsPaginationToken {
  lastCreatedAt?: Date | undefined;
}

function createBaseBlog(): Blog {
  return {
    id: "",
    content: "",
    title: "",
    imageUrl: undefined,
    tags: [],
    state: Blog_State.STATE_UNSPECIFIED,
    publishedAt: undefined,
    createdAt: undefined,
  };
}

export const Blog: MessageFns<Blog> = {
  encode(message: Blog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.imageUrl !== undefined) {
      writer.uint32(66).string(message.imageUrl);
    }
    for (const v of message.tags) {
      writer.uint32(34).string(v!);
    }
    if (message.state !== Blog_State.STATE_UNSPECIFIED) {
      writer.uint32(56).int32(blog_StateToNumber(message.state));
    }
    if (message.publishedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.publishedAt), writer.uint32(42).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Blog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.state = blog_StateFromJSON(reader.int32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.publishedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Blog {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      state: isSet(object.state) ? blog_StateFromJSON(object.state) : Blog_State.STATE_UNSPECIFIED,
      publishedAt: isSet(object.publishedAt) ? fromJsonTimestamp(object.publishedAt) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
    };
  },

  toJSON(message: Blog): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.imageUrl !== undefined) {
      obj.imageUrl = message.imageUrl;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.state !== Blog_State.STATE_UNSPECIFIED) {
      obj.state = blog_StateToJSON(message.state);
    }
    if (message.publishedAt !== undefined) {
      obj.publishedAt = message.publishedAt.toISOString();
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Blog>, I>>(base?: I): Blog {
    return Blog.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Blog>, I>>(object: I): Blog {
    const message = createBaseBlog();
    message.id = object.id ?? "";
    message.content = object.content ?? "";
    message.title = object.title ?? "";
    message.imageUrl = object.imageUrl ?? undefined;
    message.tags = object.tags?.map((e) => e) || [];
    message.state = object.state ?? Blog_State.STATE_UNSPECIFIED;
    message.publishedAt = object.publishedAt ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    return message;
  },
};

function createBaseListBlogsRequest(): ListBlogsRequest {
  return { pageToken: "", pageSize: 0 };
}

export const ListBlogsRequest: MessageFns<ListBlogsRequest> = {
  encode(message: ListBlogsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageToken !== "") {
      writer.uint32(10).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBlogsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBlogsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBlogsRequest {
    return {
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListBlogsRequest): unknown {
    const obj: any = {};
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListBlogsRequest>, I>>(base?: I): ListBlogsRequest {
    return ListBlogsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListBlogsRequest>, I>>(object: I): ListBlogsRequest {
    const message = createBaseListBlogsRequest();
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListBlogsResponse(): ListBlogsResponse {
  return { blogs: [], nextPageToken: "" };
}

export const ListBlogsResponse: MessageFns<ListBlogsResponse> = {
  encode(message: ListBlogsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.blogs) {
      Blog.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBlogsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBlogsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.blogs.push(Blog.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBlogsResponse {
    return {
      blogs: globalThis.Array.isArray(object?.blogs) ? object.blogs.map((e: any) => Blog.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListBlogsResponse): unknown {
    const obj: any = {};
    if (message.blogs?.length) {
      obj.blogs = message.blogs.map((e) => Blog.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListBlogsResponse>, I>>(base?: I): ListBlogsResponse {
    return ListBlogsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListBlogsResponse>, I>>(object: I): ListBlogsResponse {
    const message = createBaseListBlogsResponse();
    message.blogs = object.blogs?.map((e) => Blog.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListPublishedBlogsRequest(): ListPublishedBlogsRequest {
  return { pageToken: "", pageSize: 0 };
}

export const ListPublishedBlogsRequest: MessageFns<ListPublishedBlogsRequest> = {
  encode(message: ListPublishedBlogsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageToken !== "") {
      writer.uint32(10).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPublishedBlogsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPublishedBlogsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPublishedBlogsRequest {
    return {
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListPublishedBlogsRequest): unknown {
    const obj: any = {};
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListPublishedBlogsRequest>, I>>(base?: I): ListPublishedBlogsRequest {
    return ListPublishedBlogsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListPublishedBlogsRequest>, I>>(object: I): ListPublishedBlogsRequest {
    const message = createBaseListPublishedBlogsRequest();
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListPublishedBlogsResponse(): ListPublishedBlogsResponse {
  return { blogs: [], nextPageToken: "" };
}

export const ListPublishedBlogsResponse: MessageFns<ListPublishedBlogsResponse> = {
  encode(message: ListPublishedBlogsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.blogs) {
      Blog.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPublishedBlogsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPublishedBlogsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.blogs.push(Blog.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPublishedBlogsResponse {
    return {
      blogs: globalThis.Array.isArray(object?.blogs) ? object.blogs.map((e: any) => Blog.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListPublishedBlogsResponse): unknown {
    const obj: any = {};
    if (message.blogs?.length) {
      obj.blogs = message.blogs.map((e) => Blog.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListPublishedBlogsResponse>, I>>(base?: I): ListPublishedBlogsResponse {
    return ListPublishedBlogsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListPublishedBlogsResponse>, I>>(object: I): ListPublishedBlogsResponse {
    const message = createBaseListPublishedBlogsResponse();
    message.blogs = object.blogs?.map((e) => Blog.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateBlogRequest(): CreateBlogRequest {
  return { title: "", content: "", imageUrl: undefined };
}

export const CreateBlogRequest: MessageFns<CreateBlogRequest> = {
  encode(message: CreateBlogRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    if (message.imageUrl !== undefined) {
      writer.uint32(26).string(message.imageUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBlogRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBlogRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBlogRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : undefined,
    };
  },

  toJSON(message: CreateBlogRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.imageUrl !== undefined) {
      obj.imageUrl = message.imageUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateBlogRequest>, I>>(base?: I): CreateBlogRequest {
    return CreateBlogRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateBlogRequest>, I>>(object: I): CreateBlogRequest {
    const message = createBaseCreateBlogRequest();
    message.title = object.title ?? "";
    message.content = object.content ?? "";
    message.imageUrl = object.imageUrl ?? undefined;
    return message;
  },
};

function createBaseCreateBlogResponse(): CreateBlogResponse {
  return { blog: undefined };
}

export const CreateBlogResponse: MessageFns<CreateBlogResponse> = {
  encode(message: CreateBlogResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blog !== undefined) {
      Blog.encode(message.blog, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBlogResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBlogResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.blog = Blog.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBlogResponse {
    return { blog: isSet(object.blog) ? Blog.fromJSON(object.blog) : undefined };
  },

  toJSON(message: CreateBlogResponse): unknown {
    const obj: any = {};
    if (message.blog !== undefined) {
      obj.blog = Blog.toJSON(message.blog);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateBlogResponse>, I>>(base?: I): CreateBlogResponse {
    return CreateBlogResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateBlogResponse>, I>>(object: I): CreateBlogResponse {
    const message = createBaseCreateBlogResponse();
    message.blog = (object.blog !== undefined && object.blog !== null) ? Blog.fromPartial(object.blog) : undefined;
    return message;
  },
};

function createBaseGetBlogRequest(): GetBlogRequest {
  return { id: "" };
}

export const GetBlogRequest: MessageFns<GetBlogRequest> = {
  encode(message: GetBlogRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBlogRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBlogRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBlogRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetBlogRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBlogRequest>, I>>(base?: I): GetBlogRequest {
    return GetBlogRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBlogRequest>, I>>(object: I): GetBlogRequest {
    const message = createBaseGetBlogRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetBlogResponse(): GetBlogResponse {
  return { blog: undefined };
}

export const GetBlogResponse: MessageFns<GetBlogResponse> = {
  encode(message: GetBlogResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blog !== undefined) {
      Blog.encode(message.blog, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBlogResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBlogResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.blog = Blog.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBlogResponse {
    return { blog: isSet(object.blog) ? Blog.fromJSON(object.blog) : undefined };
  },

  toJSON(message: GetBlogResponse): unknown {
    const obj: any = {};
    if (message.blog !== undefined) {
      obj.blog = Blog.toJSON(message.blog);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBlogResponse>, I>>(base?: I): GetBlogResponse {
    return GetBlogResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBlogResponse>, I>>(object: I): GetBlogResponse {
    const message = createBaseGetBlogResponse();
    message.blog = (object.blog !== undefined && object.blog !== null) ? Blog.fromPartial(object.blog) : undefined;
    return message;
  },
};

function createBaseUpdateBlogRequest(): UpdateBlogRequest {
  return { id: "", title: "", content: "", imageUrl: undefined };
}

export const UpdateBlogRequest: MessageFns<UpdateBlogRequest> = {
  encode(message: UpdateBlogRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    if (message.imageUrl !== undefined) {
      writer.uint32(34).string(message.imageUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBlogRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBlogRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBlogRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : undefined,
    };
  },

  toJSON(message: UpdateBlogRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.imageUrl !== undefined) {
      obj.imageUrl = message.imageUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateBlogRequest>, I>>(base?: I): UpdateBlogRequest {
    return UpdateBlogRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateBlogRequest>, I>>(object: I): UpdateBlogRequest {
    const message = createBaseUpdateBlogRequest();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.content = object.content ?? "";
    message.imageUrl = object.imageUrl ?? undefined;
    return message;
  },
};

function createBaseUpdateBlogResponse(): UpdateBlogResponse {
  return { blog: undefined };
}

export const UpdateBlogResponse: MessageFns<UpdateBlogResponse> = {
  encode(message: UpdateBlogResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blog !== undefined) {
      Blog.encode(message.blog, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBlogResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBlogResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.blog = Blog.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBlogResponse {
    return { blog: isSet(object.blog) ? Blog.fromJSON(object.blog) : undefined };
  },

  toJSON(message: UpdateBlogResponse): unknown {
    const obj: any = {};
    if (message.blog !== undefined) {
      obj.blog = Blog.toJSON(message.blog);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateBlogResponse>, I>>(base?: I): UpdateBlogResponse {
    return UpdateBlogResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateBlogResponse>, I>>(object: I): UpdateBlogResponse {
    const message = createBaseUpdateBlogResponse();
    message.blog = (object.blog !== undefined && object.blog !== null) ? Blog.fromPartial(object.blog) : undefined;
    return message;
  },
};

function createBasePublishBlogRequest(): PublishBlogRequest {
  return { id: "" };
}

export const PublishBlogRequest: MessageFns<PublishBlogRequest> = {
  encode(message: PublishBlogRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublishBlogRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublishBlogRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublishBlogRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: PublishBlogRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublishBlogRequest>, I>>(base?: I): PublishBlogRequest {
    return PublishBlogRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublishBlogRequest>, I>>(object: I): PublishBlogRequest {
    const message = createBasePublishBlogRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasePublishBlogResponse(): PublishBlogResponse {
  return { blog: undefined };
}

export const PublishBlogResponse: MessageFns<PublishBlogResponse> = {
  encode(message: PublishBlogResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blog !== undefined) {
      Blog.encode(message.blog, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublishBlogResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublishBlogResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.blog = Blog.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublishBlogResponse {
    return { blog: isSet(object.blog) ? Blog.fromJSON(object.blog) : undefined };
  },

  toJSON(message: PublishBlogResponse): unknown {
    const obj: any = {};
    if (message.blog !== undefined) {
      obj.blog = Blog.toJSON(message.blog);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublishBlogResponse>, I>>(base?: I): PublishBlogResponse {
    return PublishBlogResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublishBlogResponse>, I>>(object: I): PublishBlogResponse {
    const message = createBasePublishBlogResponse();
    message.blog = (object.blog !== undefined && object.blog !== null) ? Blog.fromPartial(object.blog) : undefined;
    return message;
  },
};

function createBaseListPublishedBlogsPaginationToken(): ListPublishedBlogsPaginationToken {
  return { lastPublishedAt: undefined };
}

export const ListPublishedBlogsPaginationToken: MessageFns<ListPublishedBlogsPaginationToken> = {
  encode(message: ListPublishedBlogsPaginationToken, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastPublishedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.lastPublishedAt), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPublishedBlogsPaginationToken {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPublishedBlogsPaginationToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lastPublishedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPublishedBlogsPaginationToken {
    return { lastPublishedAt: isSet(object.lastPublishedAt) ? fromJsonTimestamp(object.lastPublishedAt) : undefined };
  },

  toJSON(message: ListPublishedBlogsPaginationToken): unknown {
    const obj: any = {};
    if (message.lastPublishedAt !== undefined) {
      obj.lastPublishedAt = message.lastPublishedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListPublishedBlogsPaginationToken>, I>>(
    base?: I,
  ): ListPublishedBlogsPaginationToken {
    return ListPublishedBlogsPaginationToken.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListPublishedBlogsPaginationToken>, I>>(
    object: I,
  ): ListPublishedBlogsPaginationToken {
    const message = createBaseListPublishedBlogsPaginationToken();
    message.lastPublishedAt = object.lastPublishedAt ?? undefined;
    return message;
  },
};

function createBaseListBlogsPaginationToken(): ListBlogsPaginationToken {
  return { lastCreatedAt: undefined };
}

export const ListBlogsPaginationToken: MessageFns<ListBlogsPaginationToken> = {
  encode(message: ListBlogsPaginationToken, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastCreatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.lastCreatedAt), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBlogsPaginationToken {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBlogsPaginationToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lastCreatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBlogsPaginationToken {
    return { lastCreatedAt: isSet(object.lastCreatedAt) ? fromJsonTimestamp(object.lastCreatedAt) : undefined };
  },

  toJSON(message: ListBlogsPaginationToken): unknown {
    const obj: any = {};
    if (message.lastCreatedAt !== undefined) {
      obj.lastCreatedAt = message.lastCreatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListBlogsPaginationToken>, I>>(base?: I): ListBlogsPaginationToken {
    return ListBlogsPaginationToken.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListBlogsPaginationToken>, I>>(object: I): ListBlogsPaginationToken {
    const message = createBaseListBlogsPaginationToken();
    message.lastCreatedAt = object.lastCreatedAt ?? undefined;
    return message;
  },
};

export interface Blogs {
  ListBlogs(request: DeepPartial<ListBlogsRequest>, metadata?: grpc.Metadata): Promise<ListBlogsResponse>;
  ListPublishedBlogs(
    request: DeepPartial<ListPublishedBlogsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListPublishedBlogsResponse>;
  CreateBlog(request: DeepPartial<CreateBlogRequest>, metadata?: grpc.Metadata): Promise<CreateBlogResponse>;
  GetBlog(request: DeepPartial<GetBlogRequest>, metadata?: grpc.Metadata): Promise<GetBlogResponse>;
  UpdateBlog(request: DeepPartial<UpdateBlogRequest>, metadata?: grpc.Metadata): Promise<UpdateBlogResponse>;
  PublishBlog(request: DeepPartial<PublishBlogRequest>, metadata?: grpc.Metadata): Promise<PublishBlogResponse>;
}

export class BlogsClientImpl implements Blogs {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.ListBlogs = this.ListBlogs.bind(this);
    this.ListPublishedBlogs = this.ListPublishedBlogs.bind(this);
    this.CreateBlog = this.CreateBlog.bind(this);
    this.GetBlog = this.GetBlog.bind(this);
    this.UpdateBlog = this.UpdateBlog.bind(this);
    this.PublishBlog = this.PublishBlog.bind(this);
  }

  ListBlogs(request: DeepPartial<ListBlogsRequest>, metadata?: grpc.Metadata): Promise<ListBlogsResponse> {
    return this.rpc.unary(BlogsListBlogsDesc, ListBlogsRequest.fromPartial(request), metadata);
  }

  ListPublishedBlogs(
    request: DeepPartial<ListPublishedBlogsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<ListPublishedBlogsResponse> {
    return this.rpc.unary(BlogsListPublishedBlogsDesc, ListPublishedBlogsRequest.fromPartial(request), metadata);
  }

  CreateBlog(request: DeepPartial<CreateBlogRequest>, metadata?: grpc.Metadata): Promise<CreateBlogResponse> {
    return this.rpc.unary(BlogsCreateBlogDesc, CreateBlogRequest.fromPartial(request), metadata);
  }

  GetBlog(request: DeepPartial<GetBlogRequest>, metadata?: grpc.Metadata): Promise<GetBlogResponse> {
    return this.rpc.unary(BlogsGetBlogDesc, GetBlogRequest.fromPartial(request), metadata);
  }

  UpdateBlog(request: DeepPartial<UpdateBlogRequest>, metadata?: grpc.Metadata): Promise<UpdateBlogResponse> {
    return this.rpc.unary(BlogsUpdateBlogDesc, UpdateBlogRequest.fromPartial(request), metadata);
  }

  PublishBlog(request: DeepPartial<PublishBlogRequest>, metadata?: grpc.Metadata): Promise<PublishBlogResponse> {
    return this.rpc.unary(BlogsPublishBlogDesc, PublishBlogRequest.fromPartial(request), metadata);
  }
}

export const BlogsDesc = { serviceName: "blogs.Blogs" };

export const BlogsListBlogsDesc: UnaryMethodDefinitionish = {
  methodName: "ListBlogs",
  service: BlogsDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListBlogsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListBlogsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const BlogsListPublishedBlogsDesc: UnaryMethodDefinitionish = {
  methodName: "ListPublishedBlogs",
  service: BlogsDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListPublishedBlogsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ListPublishedBlogsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const BlogsCreateBlogDesc: UnaryMethodDefinitionish = {
  methodName: "CreateBlog",
  service: BlogsDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return CreateBlogRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = CreateBlogResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const BlogsGetBlogDesc: UnaryMethodDefinitionish = {
  methodName: "GetBlog",
  service: BlogsDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetBlogRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetBlogResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const BlogsUpdateBlogDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateBlog",
  service: BlogsDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateBlogRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UpdateBlogResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const BlogsPublishBlogDesc: UnaryMethodDefinitionish = {
  methodName: "PublishBlog",
  service: BlogsDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return PublishBlogRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = PublishBlogResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
