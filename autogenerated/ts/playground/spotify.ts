// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: playground/spotify.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";

export const protobufPackage = "playground";

export interface GetRecentlyPlayedSongRequest {
}

export interface GetRecentlyPlayedSongResponse {
  track: string;
  artist: string;
  playing: boolean;
  albumArtUrl: string;
}

function createBaseGetRecentlyPlayedSongRequest(): GetRecentlyPlayedSongRequest {
  return {};
}

export const GetRecentlyPlayedSongRequest: MessageFns<GetRecentlyPlayedSongRequest> = {
  encode(_: GetRecentlyPlayedSongRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRecentlyPlayedSongRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRecentlyPlayedSongRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetRecentlyPlayedSongRequest {
    return {};
  },

  toJSON(_: GetRecentlyPlayedSongRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetRecentlyPlayedSongRequest>, I>>(base?: I): GetRecentlyPlayedSongRequest {
    return GetRecentlyPlayedSongRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetRecentlyPlayedSongRequest>, I>>(_: I): GetRecentlyPlayedSongRequest {
    const message = createBaseGetRecentlyPlayedSongRequest();
    return message;
  },
};

function createBaseGetRecentlyPlayedSongResponse(): GetRecentlyPlayedSongResponse {
  return { track: "", artist: "", playing: false, albumArtUrl: "" };
}

export const GetRecentlyPlayedSongResponse: MessageFns<GetRecentlyPlayedSongResponse> = {
  encode(message: GetRecentlyPlayedSongResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.track !== "") {
      writer.uint32(10).string(message.track);
    }
    if (message.artist !== "") {
      writer.uint32(18).string(message.artist);
    }
    if (message.playing !== false) {
      writer.uint32(24).bool(message.playing);
    }
    if (message.albumArtUrl !== "") {
      writer.uint32(34).string(message.albumArtUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRecentlyPlayedSongResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRecentlyPlayedSongResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.track = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.artist = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.playing = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.albumArtUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRecentlyPlayedSongResponse {
    return {
      track: isSet(object.track) ? globalThis.String(object.track) : "",
      artist: isSet(object.artist) ? globalThis.String(object.artist) : "",
      playing: isSet(object.playing) ? globalThis.Boolean(object.playing) : false,
      albumArtUrl: isSet(object.albumArtUrl) ? globalThis.String(object.albumArtUrl) : "",
    };
  },

  toJSON(message: GetRecentlyPlayedSongResponse): unknown {
    const obj: any = {};
    if (message.track !== "") {
      obj.track = message.track;
    }
    if (message.artist !== "") {
      obj.artist = message.artist;
    }
    if (message.playing !== false) {
      obj.playing = message.playing;
    }
    if (message.albumArtUrl !== "") {
      obj.albumArtUrl = message.albumArtUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetRecentlyPlayedSongResponse>, I>>(base?: I): GetRecentlyPlayedSongResponse {
    return GetRecentlyPlayedSongResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetRecentlyPlayedSongResponse>, I>>(
    object: I,
  ): GetRecentlyPlayedSongResponse {
    const message = createBaseGetRecentlyPlayedSongResponse();
    message.track = object.track ?? "";
    message.artist = object.artist ?? "";
    message.playing = object.playing ?? false;
    message.albumArtUrl = object.albumArtUrl ?? "";
    return message;
  },
};

export interface Spotify {
  GetRecentlyPlayedSong(
    request: DeepPartial<GetRecentlyPlayedSongRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetRecentlyPlayedSongResponse>;
}

export class SpotifyClientImpl implements Spotify {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.GetRecentlyPlayedSong = this.GetRecentlyPlayedSong.bind(this);
  }

  GetRecentlyPlayedSong(
    request: DeepPartial<GetRecentlyPlayedSongRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetRecentlyPlayedSongResponse> {
    return this.rpc.unary(
      SpotifyGetRecentlyPlayedSongDesc,
      GetRecentlyPlayedSongRequest.fromPartial(request),
      metadata,
    );
  }
}

export const SpotifyDesc = { serviceName: "playground.Spotify" };

export const SpotifyGetRecentlyPlayedSongDesc: UnaryMethodDefinitionish = {
  methodName: "GetRecentlyPlayedSong",
  service: SpotifyDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetRecentlyPlayedSongRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetRecentlyPlayedSongResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
