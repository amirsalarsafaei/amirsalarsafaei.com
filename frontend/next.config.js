const path = require('path');
const TerserPlugin = require('terser-webpack-plugin');
const sass = require('sass');

/** @type {import('next').NextConfig} */
const nextConfig = {
  // Output configuration for better deployment
  output: 'standalone',
  reactStrictMode: true,
  swcMinify: false, // Disable SWC minification to reduce memory usage

  // Enhanced compiler options
  compiler: {
    removeConsole: process.env.NODE_ENV === 'production' ? {
      exclude: ['error', 'warn'],
    } : false,
    styledComponents: false,
    emotion: false,
    reactRemoveProperties: process.env.NODE_ENV === 'production',
    relay: false,
  },

  // Group transpilePackages by functionality
  transpilePackages: [
// Three.js related packages
    'three',
    'three-stdlib',
    '@react-three/drei',
    '@react-three/fiber',
    '@react-three/postprocessing',
    'three-mesh-bvh',
    'troika-three-text',
    // Additional 3D packages
    'postprocessing',
    'maath',
    'meshline',
    '@theatre/core',
    '@theatre/r3f',
    'three-custom-shader-material'
  ],

  // SASS configuration
  sassOptions: {
    includePaths: [path.join(__dirname, 'styles')],
    implementation: sass,
    prependData: `@import "src/styles/global.scss";`, // Adjust this path to your variables file
  },

  // Optimized experimental features
  experimental: {
    // Disable memory-intensive optimizations
    optimizeCss: false,

    // Memory and performance optimizations
    serverActions: true,
    serverComponentsExternalPackages: [],

    // Reduced concurrent operations
    workerThreads: true,
    cpus: 1,

    // Build optimizations with memory constraints
    turbotrace: {
      logLevel: 'error',
      memoryLimit: 2048
    }
  },

  // Improved webpack configuration
  webpack: (config, { isServer }) => {
    // Aliases
    config.resolve.alias = {
      ...config.resolve.alias,
      '@': path.resolve(__dirname, 'src'),
      '@generated': path.resolve(__dirname, '../autogenerated/ts'),
      '@styles': path.resolve(__dirname, 'src/styles'),
      '@components': path.resolve(__dirname, 'src/components'),
      '@three': path.resolve(__dirname, 'src/three'),
      'three-stdlib': path.resolve(__dirname, 'node_modules/three-stdlib'),
    };

    // Optimize cache configuration
    config.cache = {
      type: 'filesystem',
      buildDependencies: {
        config: [__filename]
      },
      cacheDirectory: path.resolve(__dirname, '.next/cache/webpack')
    };

    // Memory optimizations for client builds
    if (!isServer) {
      config.optimization = {
        ...config.optimization,
        runtimeChunk: 'single',
        moduleIds: 'deterministic',
        chunkIds: 'deterministic',
        minimize: true,
        minimizer: [
          '...',
          new TerserPlugin({
            parallel: false,
            terserOptions: {
              compress: {
                drop_console: process.env.NODE_ENV === 'production',
                dead_code: true,
                passes: 1,
              },
              mangle: true,
              output: {
                comments: false,
              },
            },
          }),
        ],
        splitChunks: {
          chunks: 'all',
          maxInitialRequests: 10,
          minSize: 50000,
          maxSize: 244000,
          cacheGroups: {
            vendor: {
              test: /[\\/]node_modules[\\/]/,
              name(module) {
                const packageName = module.context.match(/[\\/]node_modules[\\/](.*?)([\\/]|$)/)[1];
                return `vendor.${packageName.replace('@', '')}`;
              },
              priority: 20
            },
            three: {
              test: /[\\/]node_modules[\\/](three|@react-three|postprocessing|@theatre)[\\/]/,
              name: 'three-vendor',
              chunks: 'all',
              priority: 30,
              enforce: true
            },
            styles: {
              test: /\.(css|scss|sass)$/,
              name: 'styles',
              chunks: 'all',
              enforce: true,
              priority: 25
            },
            default: {
              minChunks: 2,
              priority: -20,
              reuseExistingChunk: true
            }
          }
        }
      };

      // Limit parallel operations
      config.parallelism = 1;
    }

    return config;
  },

  // File extensions
  pageExtensions: ['tsx', 'ts', 'jsx', 'js'],

  // Error handling in production
  eslint: {
    dirs: ['pages', 'components', 'lib', 'src'], // Specify directories to lint
    ignoreDuringBuilds: process.env.NODE_ENV === 'production'
  },

  typescript: {
    // Only ignore build errors in production
    ignoreBuildErrors: process.env.NODE_ENV === 'production'
  },

  // Additional performance optimizations
  poweredByHeader: false,
  compress: true,
  generateEtags: true,

  // Production source maps
  productionBrowserSourceMaps: false
};

module.exports = nextConfig;
